import { useState, useEffect } from 'react';
import Head from 'next/head'
import Image from 'next/image'
import Link from 'next/link';
import {
  ApolloClient,
  InMemoryCache,
  gql
} from "@apollo/client";
import center from '@turf/center';
import { points } from '@turf/helpers';
import { getCoord } from '@turf/meta';
import { FaExternalLinkAlt } from 'react-icons/fa';

import Layout from '@components/Layout';
import Container from '@components/Container';
import Button from '@components/Button';
import Marker from '@components/Marker';
import Map from '@components/Map';

import products from '@data/products';

import styles from '@styles/Page.module.scss'

export default function Home({ storeLocations }) {
  const [activeStore, setActiveStore] = useState()

  const features = points(storeLocations.map(({ location }) => {
    return [location.latitude, location.longitude]
  }));

  const [defaultLat, defaultLng] = center(features)?.geometry.coordinates;

  return (
    <Layout>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
      </Head>

      <Container>
        <h1>Locations</h1>

        <div className={styles.stores}>

          <div className={styles.storesLocations}>
            <ul className={styles.locations}>
              {storeLocations.map(location => {
                function handleOnClick() {
                  setActiveStore(location.id);
                }
                return (
                  <li key={location.id}>
                    <p className={styles.locationName}>
                      {location.name}
                    </p>
                    <address>
                      { location.address }
                    </address>
                    <p>
                      { location.phoneNumber }
                    </p>
                    <p className={styles.locationDiscovery}>
                      <button onClick={handleOnClick} >
                        View on Map
                      </button>
                      <a href={`https://www.google.com/maps/dir//${location.location.latitude},${location.location.longitude}/@${location.location.latitude},${location.location.longitude},15z`} target="_blank" rel="noreferrer">
                        Get Directions
                        <FaExternalLinkAlt />
                      </a>
                    </p>
                  </li>
                )
              })}
            </ul>
          </div>

          <div className={styles.storesMap}>
            <div className={styles.storesMapContainer}>
              <Map className={styles.map} center={[defaultLat, defaultLng]} zoom={4} zoomControl={false}>
                {({ TileLayer, Marker, Popup, ZoomControl }, map) => {
                  useEffect(() => {
                    if ( !activeStore ) return;

                    const { location } = storeLocations.find(({ id }) => id === activeStore);

                    map.setView([location.latitude, location.longitude], 14);
                  }, [activeStore])
                  return (
                    <>
                      <TileLayer
                        url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
                        attribution="&copy; <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors"
                      />
                      {storeLocations.map(location => {
                        const { latitude, longitude } = location.location;

                        function handleOnClick() {
                          setActiveStore(location.id);
                        }

                        return (
                          <Marker key={location.id} position={[latitude, longitude]} onClick={handleOnClick}>
                            <Popup>
                              <p><strong>{ location.name }</strong></p>
                              <address>{ location.address }</address>
                            </Popup>
                          </Marker>
                        )
                      })}
                      <ZoomControl position="bottomright" />
                    </>
                  )
                }}
              </Map>
            </div>
          </div>
        </div>
      </Container>
    </Layout>
  )
}

export async function getStaticProps() {
  const client = new ApolloClient({
    uri: process.env.GRAPHCMS_ENDPOINT,
    cache: new InMemoryCache()
  });

  const { data } = await client.query({
    query: gql`
      query Stores {
        storeLocations {
          address
          name
          id
          location {
            longitude
            latitude
          }
          phoneNumber
        }
      }
    `
  })

  const { storeLocations } = data;

  return {
    props: {
      storeLocations
    }
  }
}