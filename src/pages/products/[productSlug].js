import Head from 'next/head'
import Image from 'next/image'
import {
  ApolloClient,
  InMemoryCache,
  gql
} from "@apollo/client";

import Layout from '@components/Layout';
import Header from '@components/Header';
import Container from '@components/Container';
import Button from '@components/Button';

import styles from '@styles/Product.module.scss'

export default function Product({ product }) {
  const { images } = product;
  return (
    <Layout>
      <Head>
        <title>{ product.name }</title>
        <meta name="description" content="Generated by create next app" />
      </Head>

      <Container>
        <div className={styles.productWrapper}>
          <div className={styles.productImage}>
            <Image width={images[0].width} height={images[0].height} src={images[0].url} alt="" />
          </div>
          <div className={styles.productContent}>
            <h1>{ product.name }</h1>
            <div dangerouslySetInnerHTML={{
              __html: product.description.html
            }} />
            <p className={product.price}>
            </p>
            <p>
              <Button>
                Add to Cart
              </Button>
            </p>
          </div>
        </div>
      </Container>
    </Layout>
  )
}

export async function getStaticProps({ params, locale }) {
  const { productSlug } = params;

  const client = new ApolloClient({
    uri: process.env.GRAPHCMS_ENDPOINT,
    cache: new InMemoryCache()
  });

  const { data } = await client.query({
    query: gql`
      query Product($slug: String!, $locale: Locale!) {
        product(where: {slug: $slug}) {
          name
          description {
            html
          }
          id
          images {
            id
            url
            width
            height
          }
          localizations(locales: [$locale]) {
            description {
              html
            }
            locale
          }
          locale
          price
          slug
        }
      }
    `,
    variables: {
      slug: productSlug,
      locale
    }
  });

  let product = data.product;

  if ( product.localizations.length > 0 ) {
    product = {
      ...product,
      ...product.localizations[0]
    }
  }

  return {
    props: {
      product
    }
  }
}

export async function getStaticPaths({ locales }) {
  const client = new ApolloClient({
    uri: process.env.GRAPHCMS_ENDPOINT,
    cache: new InMemoryCache()
  });

  const { data } = await client.query({
    query: gql`
      query Products {
        products {
          id
          slug
        }
      }
    `
  });

  const { products } = data;

  const paths = products.map(({ slug }) => {
    return {
      params: {
        productSlug: slug
      }
    };
  });

  return {
    paths: [
      ...paths,
      ...paths.map(path => ({
        ...path,
        locale: 'es'
      }))
    ],
    fallback: false
  }
}