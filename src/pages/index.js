import { useState } from 'react';
import Head from 'next/head'
import Image from 'next/image'
import Link from 'next/link';
import {
  ApolloClient,
  InMemoryCache,
  gql
} from "@apollo/client";

import { buildRemoteUrl, buildUrlByPublicId } from '@lib/cloudinary';

import Layout from '@components/Layout';
import Container from '@components/Container';
import Button from '@components/Button';

import products from '@data/products';

import styles from '@styles/Page.module.scss'

export default function Home({ page, products }) {
  return (
    <Layout>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
      </Head>

      <Container>
        <h1 className="sr-only">Space Jelly Gear</h1>

        <div className={styles.hero}>
          <Link href={page.heroLink}>
            <a className={styles.heroLink}>
              <div className={styles.heroContent}>
                <h2>{ page.heroTitle }</h2>
                <p>{ page.heroText }</p>
              </div>
              <picture className={styles.heroImage}>
                <source media="(max-width: 719px)" srcSet={buildRemoteUrl(page.heroBackground.url, {
                  transformations: {
                    gravity: 'auto:subject',
                    resize: {
                      type: 'crop',
                      width: 800,
                      height: 400
                    }
                  }
                })} />
                <source media="(min-width: 720px)" srcSet={buildRemoteUrl(page.heroBackground.url)} />
                <img src={buildRemoteUrl(page.heroBackground.url)} alt="" />
              </picture>
            </a>
          </Link>
        </div>

        <h2 className={styles.heading}>Featured Gear</h2>

        <ul className={styles.products}>
          {products.map(product => {
            const { image } = product;
            return (
              <li key={product.id}>
                <Link href={`/products/${product.slug}`}>
                  <a>
                    <div className={styles.productImage}>
                      <img width={image.width} height={image.height} src={buildUrlByPublicId(image.public_id, {
                        transformations: {
                          width: 500, height: 500
                        }
                      })} alt="" />
                    </div>
                    <h3 className={styles.productTitle}>
                      { product.name }
                    </h3>
                    <p className={styles.productPrice}>
                      ${ product.price }
                    </p>
                  </a>
                </Link>
                <p>
                  <Button
                    className="snipcart-add-item"
                    data-item-id={product.slug}
                    data-item-price={product.price}
                    data-item-url={`/products/${product.slug}`}
                    data-item-image={buildUrlByPublicId(image.public_id)}
                    data-item-name={product.name}
                  >
                    Add to Cart
                  </Button>
                </p>
              </li>
            )
          })}
        </ul>
      </Container>
    </Layout>
  )
}

export async function getStaticProps({ locale }) {
  const client = new ApolloClient({
    uri: process.env.GRAPHCMS_ENDPOINT,
    cache: new InMemoryCache()
  });

  const { data } = await client.query({
    query: gql`
      query Home($locale: Locale!) {
        category(where: {slug: "featured"}) {
          products {
            name
            id
            image
            price
            slug
          }
        }
        page(where: {slug: "home"}) {
          id
          heroLink
          heroText
          heroTitle
          heroBackground {
            url
            width
            height
          }
          localizations(locales: [$locale]) {
            heroText
            heroTitle
          }
        }
      }
    `,
    variables: {
      locale
    }
  })

  const { products } = data?.category;

  let page = data.page;

  if ( page.localizations.length > 0 ) {
    page = {
      ...page,
      ...page.localizations[0]
    }
  }

  return {
    props: {
      page,
      products
    }
  }
}